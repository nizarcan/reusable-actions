name: Release and Deploy

on:
  workflow_call:
    inputs:
      runner:
        description: 'Runner to use (self-hosted or github-hosted)'
        required: false
        type: string
        default: 'self-hosted'
      image_description:
        description: 'Docker image description'
        required: false
        type: string
        default: 'Docker image'
      platforms:
        description: 'Build platforms (comma-separated)'
        required: false
        type: string
        default: 'linux/arm64'
      branch:
        description: 'Branch to use for semantic release'
        required: false
        type: string
        default: 'main'
      additional_plugins:
        description: 'Additional semantic-release plugins'
        required: false
        type: string
        default: '@semantic-release/github'
      build_args:
        description: 'Docker build arguments as JSON string'
        required: false
        type: string
        default: '{}'
      licenses:
        description: 'Licenses for the image'
        required: false
        type: string
        default: 'MIT'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  version:
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        with:
          branch: ${{ inputs.branch }}
          extra_plugins: |
            ${{ inputs.additional_plugins }}

      - name: Extract version
        id: extract_version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: echo "version=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ${{ inputs.runner }}
    needs: version
    if: needs.version.outputs.new_release_published == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: contains(inputs.platforms, ',')

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.version.outputs.new_version }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=${{ inputs.image_description }}
            org.opencontainers.image.version=${{ needs.version.outputs.new_version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=${{ inputs.licenses }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: ${{ inputs.build_args }}
          provenance: false
